#include <iostm8S207c8.h>
#include "Uboot.h"
#include "Beep.h"
#include "UART3.H"
#include "Timer4.H"
#include "LCD12232.h"
#include "Flash.h"
#include "sha1.h"

#define  TimeOut100us       20

#define FILE_NAME_LEN          14  //FileName长度
const unsigned char FileName[FILE_NAME_LEN]={"RFID CHIP UPDA"};  //文件合法标志"RFID CHIP UPDA"






const unsigned char Plan[]={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};
void BootLoad(void)
{
    unsigned char DataBuff[1050];
    unsigned char *TempBuff;
    unsigned char Temp; 
    unsigned char LastFlag;	
    unsigned char Comd;
    unsigned short i,j;
    unsigned short DataLen;	  
    unsigned short Sum;
    unsigned short Ver;
    unsigned long Addr;
   
   
   TempBuff = DataBuff+100;//DataBuff空间复用
   
   while(UART3_GetByte(&Temp,TimeOut100us)==RIGHT) 
   {
       if(((Temp&0x0f)^(Temp>>4))==0x0e)//验证指令的正确性
       {
          Comd = Temp;
	  Sum = Temp;
          
          switch(Comd)
          {
             case 0x79:
                      for(i=0;i<7;i++)
                      {
                          if(UART3_GetByte(&Temp,TimeOut100us)!=RIGHT) 
                          {
                              delay100us(5000);
                              UART3_SendByte(COMD_TIMEOUT);
                              Sum = COMD_TIMEOUT;														  
                              UART3_SendByte(Sum);
                              UART3_SendByte(Sum>>8);	
                              return;
                          }
                          DataBuff[i] = Temp;
                      }
                      for(j=0;j<5;j++)
		      {
                          Sum += DataBuff[j];
                      }
                      if(Sum!=(((unsigned short)DataBuff[i-1]<<8)+DataBuff[i-2])) 	
                      {
                          delay100us(1000);
                          UART3_SendByte(DATA_CORRUPTION);//数据包损坏	
                          Sum = DATA_CORRUPTION;														  
                          UART3_SendByte(Sum);
                          UART3_SendByte(Sum>>8);														  
                      }												
                      else
                      {
                          delay100us(1000);														  
                          for(j=1,Sum=0;j<9;j++)
                          {
                             Sum += DataBuff[j];
                          }
                          UART3_SendByte(Sum);
                          UART3_SendByte(Sum>>8);
                          Sum = (0x00ff&Sum)+(Sum>>8);
                          UART3_SendByte(FINISH);															
                          Sum += FINISH;														  
                          UART3_SendByte(Sum);
                          UART3_SendByte(Sum>>8);
                      }
                      break;
                      
             case 0x86://验证文件是否是所要的文件
                      for(i=0;i<5;i++)
                      {
                          if(UART3_GetByte(&Temp,TimeOut100us)!=RIGHT) 
                          {
                              delay100us(10000);
                              UART3_SendByte(COMD_TIMEOUT);
                              Sum = COMD_TIMEOUT;														  
                              UART3_SendByte(Sum);
                              UART3_SendByte(Sum>>8);	
                              return;
                          }
                          DataBuff[i] = Temp;
                          Sum += DataBuff[i];															
                      }
                      DataLen = ((unsigned short)DataBuff[3]<<8)+DataBuff[2];
                      for(i=0;i<DataLen+2;i++)
                      {
                          if(UART3_GetByte(&Temp,TimeOut100us)!=RIGHT) 
                          {
                              delay100us(10000);
                              UART3_SendByte(COMD_TIMEOUT);
                              Sum = COMD_TIMEOUT;														  
                              UART3_SendByte(Sum);
                              UART3_SendByte(Sum>>8);
                              return;
                          }
                          DataBuff[i] = Temp;		
                          if(i<DataLen) Sum += DataBuff[i];															
                      }
                      for(j=0;j<FILE_NAME_LEN;j++)
                      {
                          if(DataBuff[j]!=*(unsigned char*)(FileName+j))
                          {
                              delay100us(10000);
                              UART3_SendByte(FIRMWARE_ERROR);
                              Sum = FIRMWARE_ERROR;														  
                              UART3_SendByte(Sum);
                              UART3_SendByte(Sum>>8);
                              return;
                          }
                      }
                      if(Sum!=(((unsigned short)DataBuff[i-1]<<8)+DataBuff[i-2])) 	
                      {
                          delay100us(1000);
                          UART3_SendByte(DATA_CORRUPTION);//数据包损坏	
                          Sum = DATA_CORRUPTION;														  
                          UART3_SendByte(Sum);
                          UART3_SendByte(Sum>>8);													  
                      }
                      else
                      {
                          Flash_Write_Bytes(VERSIONS,(unsigned char*)"000000",6);													 
                          UART3_SendByte(FINISH);
                          Sum = FINISH;														  
                          UART3_SendByte(Sum);
                          UART3_SendByte(Sum>>8);
                                //在应用BootLoader中要软复位
                          }
                      break;
                     
             case 0xa4://获取版本号
                      for(i=0;i<4;i++)
                      {
                          if(UART3_GetByte(&Temp,TimeOut100us)!=RIGHT) 
                          {
                              delay100us(5000);
                              UART3_SendByte(COMD_TIMEOUT);
                              Sum = COMD_TIMEOUT;														  
                              UART3_SendByte(Sum);
                              UART3_SendByte(Sum>>8);	
                              return;
                          }
                          DataBuff[i] = Temp;
                          Sum += Temp;
                      }
                      for(i=0;i<3;i++)
                      {
                          if(UART3_GetByte(&Temp,TimeOut100us)!=RIGHT) 
                          {
                              delay100us(5000);
                              UART3_SendByte(COMD_TIMEOUT);
                              Sum = COMD_TIMEOUT;														  
                              UART3_SendByte(Sum);
                              UART3_SendByte(Sum>>8);		
                              return;
                          }
                          DataBuff[i] = Temp;								
                      }
                      Sum += DataBuff[0];
                      if(Sum!=(((unsigned short)DataBuff[i-1]<<8)+DataBuff[i-2])) 	
                      {
                          delay100us(1000);
                          UART3_SendByte(DATA_CORRUPTION);//数据包损坏	
                          Sum = DATA_CORRUPTION;														  
                          UART3_SendByte(Sum);
                          UART3_SendByte(Sum>>8);													  
                      }												
                      else
                      {
                          delay100us(1000);		
                            
                        //  if((*(__far unsigned char*)VERSIONS=='V')&&(*(__far unsigned char*)(VERSIONS+3)=='.'))
                          if((*(__far unsigned char*)CODE_FLAG=='C')&&(*(__far unsigned char*)(CODE_FLAG+1)=='O')
                             &&(*(__far unsigned char*)(CODE_FLAG+2)=='D')&&(*(__far unsigned char*)(CODE_FLAG+3)=='E'))
                          {
                             UART3_SendByte(((*(__far unsigned char*)(VERSIONS+4)-'0')<<4)+(*(__far unsigned char*)(VERSIONS+5)-'0'));
                             UART3_SendByte(((*(__far unsigned char*)(VERSIONS+1)-'0')<<4)+(*(__far unsigned char*)(VERSIONS+2)-'0'));
                             Sum = (((*(__far unsigned char*)(VERSIONS+4)-'0')<<4)+(*(__far unsigned char*)(VERSIONS+5)-'0'))+(((*(__far unsigned char*)(VERSIONS+1)-'0')<<4)+(*(__far unsigned char*)(VERSIONS+2)-'0'));                            
                          }		
                          else
                          {
                             UART3_SendByte(0x00);
                             UART3_SendByte(0x00);
                             Sum = 0;
                          }															
                          UART3_SendByte(FINISH);
                          Sum += FINISH;														  
                          UART3_SendByte(Sum);
                          UART3_SendByte(Sum>>8);
                      }	
                      break;
                      
             case 0xC2://设备验证
                      for(i=0;i<5;i++)
                      {
                          if(UART3_GetByte(&Temp,TimeOut100us)!=RIGHT) 
                          {
                              delay100us(10000);
                              UART3_SendStr(TempBuff,30);
                              UART3_SendByte(COMD_TIMEOUT);
                              Sum = 0;
                              for(j=0;j<30;j++) Sum += TempBuff[j];
                              Sum += COMD_TIMEOUT;
                              UART3_SendByte(Sum);
                              UART3_SendByte(Sum>>8);
                              
                              return;
                          }
                          DataBuff[i] = Temp;
                          Sum += Temp;
                      }
                      DataLen = ((unsigned short)DataBuff[3]<<8)+DataBuff[2];
                      for(i=0;i<DataLen+2;i++)
                      {
                          if(UART3_GetByte(&Temp,TimeOut100us)!=RIGHT) 
                          {
                              delay100us(10000);
                              UART3_SendStr(TempBuff,30);
                              UART3_SendByte(COMD_TIMEOUT);
                              Sum = 0;
                              for(j=0;j<30;j++) Sum += TempBuff[j];
                              Sum += COMD_TIMEOUT;
                              UART3_SendByte(Sum);
                              UART3_SendByte(Sum>>8);
                              return;
                          }
                          DataBuff[i] = Temp;		
                          if(i<DataLen) Sum += DataBuff[i];															
                      }
                      if(Sum!=(((unsigned short)DataBuff[i-1]<<8)+DataBuff[i-2])) 	
                      {
                          delay100us(10000);
                                  
                          UART3_SendStr(TempBuff,30);
                          UART3_SendByte(DATA_CORRUPTION);//数据包损坏
                          Sum = 0;
                          for(j=0;j<30;j++) Sum += TempBuff[j];
                          Sum += COMD_TIMEOUT;
                          UART3_SendByte(Sum);
                          UART3_SendByte(Sum>>8);														
                      }
                      else
                      {
                        APP_FUNCTION(DataLen-10,DataBuff,TempBuff);//算出20字节到TempBuff
                        for(j=0;j<8;j++)
                        {
                            if((DataBuff[DataLen-10]>>j)&0x01) TempBuff[20+j] = DataBuff[DataLen-8+j]^DataBuff[DataLen-9];
                        }
                        Sum = 0;
                        for(j=0;j<30;j++)
                        {
                           Sum += TempBuff[j];
                        }   
                        UART3_SendStr(TempBuff,30);
                        UART3_SendByte(FINISH);
                        Sum += FINISH;
                        UART3_SendByte(Sum);
                        UART3_SendByte(Sum>>8);
                      }
                      break;
                      
             case 0xd3:
                      for(i=0;i<5;i++)
                      {
                          if(UART3_GetByte(&Temp,TimeOut100us)!=RIGHT) 
                          {
                              delay100us(10000);
                              UART3_SendByte(COMD_TIMEOUT);//接收超时
                              Sum = COMD_TIMEOUT;														  
                              UART3_SendByte(Sum);
                              UART3_SendByte(Sum>>8);
                                          return;
                          }
                          DataBuff[i] = Temp;
                          Sum += Temp;
                      }
                      LastFlag = DataBuff[4];
                      Ver = ((unsigned short)DataBuff[1]<<8)+DataBuff[0];
                      DataLen = ((unsigned short)DataBuff[3]<<8)+DataBuff[2];
                      Addr = (((unsigned long)(DataBuff[4]&0x7f)-1)*1024)+FIREWARE_ADDRESS;
                      for(i=0;i<DataLen+2;i++)
                      {
                          if(UART3_GetByte(&Temp,TimeOut100us)!=RIGHT) 
                          {
                              delay100us(10000);
                              UART3_SendByte(COMD_TIMEOUT);//接收超时
                              Sum = COMD_TIMEOUT;														  
                              UART3_SendByte(Sum);
                              UART3_SendByte(Sum>>8);
                              return;
                          }
                          DataBuff[i] = Temp;															
                      }
                      for(j=0;j<DataLen;j++)
		      {
                         Sum += DataBuff[j];
                      }
                      if(Sum!=(((unsigned short)DataBuff[i-1]<<8)+DataBuff[i-2])) 	
                      {
                          delay100us(10000);
                          UART3_SendByte(DATA_CORRUPTION);//数据包损坏
                          Sum = DATA_CORRUPTION;														  
                          UART3_SendByte(Sum);
                          UART3_SendByte(Sum>>8);														
                      }
                      else
		      {														  
                           if((LastFlag&0x7f)==1) 
                           {
                              LcdIni();
                              DisplayStr(6,1,"Downloading...");                              
                           }
                           DrawBmp(((unsigned int)(LastFlag&0x7f)-1)*24/10,0,3,Plan);
 
                           Flash_Write_Bytes(Addr,(unsigned char*)DataBuff,DataLen);	//升级固件	写进FLASH															  														
                                                                                                                    
                          for(j=0;j<DataLen;j++)	
                          {
                             if((DataBuff[j]!=*(__far unsigned char *)(Addr+j)))//比较写进和缓冲的数据
                             {
                                 UART3_SendByte(FLASH_WRITE_ERROR);//升级失败
                                 Sum = FLASH_WRITE_ERROR;														  
                                 UART3_SendByte(Sum);
                                 UART3_SendByte(Sum>>8);
                                 return;
                             }
                          }	                                                                                         
                          if((LastFlag&0x80)==0x80)
                          {
                              DataBuff[0] = 'V';
                              DataBuff[1] = ((Ver>>12)&0x000f)+'0';	
                              DataBuff[2] = ((Ver>>8)&0x000f)+'0';
                              DataBuff[3] = '.';
                              DataBuff[4] = ((Ver>>4)&0x000f)+'0';	
                              DataBuff[5] = (Ver&0x000f)+'0';	                              
                              Flash_Write_Bytes(VERSIONS,(unsigned char*)DataBuff,6);	
                              Flash_Write_Bytes(CODE_FLAG,(unsigned char*)"CODE",4);	//完成写标志

                            //  delay100us(10000);
                                                                                                                            
                              UART3_SendByte(FINISH);//成功
                              Sum = FINISH;														  
                              UART3_SendByte(Sum);
                              UART3_SendByte(Sum>>8);
                            //  ((void (*) (void)) 0x8000) ();//复位 
                              //利用看门狗实现软件复位
                              IWDG_KR = 0xcc;//启动看门狗
                              IWDG_KR = 0x55;//解除写保护
                              IWDG_RLR = 0x00;//计数器重载
                              IWDG_PR = 0x06;//分频系数
                              IWDG_KR = 0xaa;//刷新IDDG                              
                          }		
                          else
                          {
                              UART3_SendByte(FINISH);//成功
                              Sum = FINISH;														  
                              UART3_SendByte(Sum);
                              UART3_SendByte(Sum>>8);
                          }																
		      }
                      break;
                      
             default:break;
          }
       }
   }
}
